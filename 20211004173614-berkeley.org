:PROPERTIES:
:ID:       06e659a8-7bec-495c-b0fe-7ca216311a34
:END:
#+title: berkeley
* Classes
** Taken
*** trivial
**** [[id:ae59b73e-705f-4735-9e78-a3bbabf99e6e][cs61a]], A
*** trivial++
nothing... yet >:)
*** non-trivial
nothing... yet >:)
** Taking
*** [[id:bf142b12-94eb-4561-9b84-0a5c04e5ff2d][cs61b]]
*** [[id:9cc23d47-c537-4606-bbcc-ba08170577e6][cs70]] 
*** [[id:fdf74abd-8449-4783-a092-cefd352411ce][math1b]]
*** [[id:b5a4e7bb-a4bd-40eb-b680-bf4aa14e1e26][bioe10]]
*** [[id:80d92004-134f-49d3-8e50-7abf92cd7ed0][bioe26]]
** Next sem
***  
** future

* TODO
regex for ids, find out how to only look at above headlines
highlight courses w/ no prereqs in red or smth
#+BEGIN_SRC emacs-lisp
    (defun getProp (id &optional prop)
    (setq prop (or (prop "PREREQS")))
    ;returns prereqs property of a node with :ID: of id
	(setq amongus (org-roam-node-from-id id))
	(setq amogus (org-roam-node-properties amongus))

    ;hard check the 'correct' index for prereqs (faster)
	(if (string= (car (car (cdr amogus))) prop)
	  (cdr (car (cdr amogus)))
      (cdr (nth (cl-position prop (mapcar 'car amogus) :test 'equal) amogus))))

    (defun getPreReqs (id)
      (setq pr (getProp id))
      (if (eq "" pr) nil
        ; regex for ids

    )
  ;  (print (car (print (split-string (getPrereqs "53cc3b56-f663-4d95-a45f-851c0f7410e7") " "))))
    (print (eq "" (getPrereqs "378402e9-a0ee-4a41-9f7a-7c6e718d149c")))

    (print (getPrereqs "92a591d0-a222-404b-a8e4-3a399e897546"))

#+END_SRC

#+RESULTS:
: [[id:ae59b73e-705f-4735-9e78-a3bbabf99e6e][cs61a]] [[id:bf142b12-94eb-4561-9b84-0a5c04e5ff2d][cs61b]]


[[id:a33d7edb-eaf0-4601-ac04-87e32755885c][futurecourses]]
